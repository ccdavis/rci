// Performance with 1600 x 1600 50 iterations
// RCI  -- strictly typed Lox -- (mine) 162 seconds
//
// Other versions of Lox with the same program:
// Rust Tree-walk version: Took 331 seconds. The bytecode compiled version didn't work.  :  https://github.com/tdp2110/crafting-interpreters-rs
//  Rust tree-walk interpreter: this one took 74 seconds : https://github.com/julioolvr/rlox
// JLox: 30.8 seconds This is on Java, right from the Crafting Interpreters book
//
// Other languages. All were similar naive approaches with single threading.
// Similar JRuby 9.1 program: 48 seconds
// Python 2 and Ruby 1.x would probably be similar to the JRuby results
// Similar Rust: 0.1 seconds
// Free Pascal 0.33 seconds
//
// Testing out the impact of lots of function calls in the inner loop.
//  Swapping in sqr() for everywhere we mutiply square a var by itself slows things
// down by about 10%. Not bad actually.

type Complex = Rec { x: Num, iy: Num }

fun complex_mul(c1: Complex, c2: Complex): Complex {
	var new_x = c1.x * c2.x
	var new_iy = c1.x * c2.iy
	new_iy :=  new_iy + c1.iy * c2.x 
	new_x := new_x + c1.iy * c2.iy * -1.0
	return Complex(x: new_x, iy: new_iy)	
}

fun complex_add(c1: Complex, c2: Complex): Complex {
	return Complex(x: c1.x + c2.x, iy: c1.iy + c2.iy)	
}

val x_resolution = 100
val y_resolution = 132

val max_iterations = 50;
val escape_radius = 2.0;


fun not_escaped(x:Num,iy:Num):Bool {
	return (x*x + iy*iy) < 2*escape_radius; 	
}

// Check a point in the complex plane for membership
fun in_mandelbrot(c: Complex): Bool {
	var iterations = 0;
	var zn_x = 0.0;
	var zn_iy = 0.0;
	
	var tmp_zx = 0.0;
	
	while iterations < max_iterations and not_escaped(zn_x, zn_iy) {			
		tmp_zx := c.x + (zn_x * zn_x - zn_iy * zn_iy)
		zn_iy := c.iy + 2.0 * zn_x * zn_iy
		zn_x := tmp_zx;
		
		iterations := iterations + 1;
	}
	return iterations < max_iterations;
}

fun calc(x1:Num, y1:Num, x2:Num, y2:Num):Num {
	var left = x1;
	val right = x2;
	var top = y1;
	val bottom = y2;
	
	val height= bottom - top;
	val width =  right - left;
	val x_increment =width / x_resolution;
	val y_increment =height / y_resolution; 
	
	var points = 0;	
	var inside = 0;
	
	while left < right {						
		val line = "";
		while top < bottom {
			if in_mandelbrot(Complex(x: left, iy: top)) {
				line := line + "*";
				inside := inside +1;
			} 
			else {
				line := line + " ";
			}
			top := top + y_increment;
			points := points + 1;			
		}
		print line;
		top := y1;
		left := left + x_increment;
	}
	
	return points;
}



{	
	print "Starting with  X-resolution: ",x_resolution, " Y-resolution: ", y_resolution;
	//val start = clock();
	calc(-1.5, -1.0, 1.0, 1.0);
	//print "Timer: ", (clock() - start) / 1000;
	print("Finished");
}
